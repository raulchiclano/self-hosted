version: '3.3'

services:
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    user: 1000:1000
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - proxy
      - monitoring
    env_file:
      - tick.env
    labels:
      - org.label-schema.group=monitoring
      - traefik.enable=true
      - traefik.http.services.grafana.loadbalancer.server.port=3000
      - traefik.http.routers.grafana-secure.entrypoints=websecure
      - traefik.http.routers.grafana-secure.rule=Host(`${GRAFANA_FQDN}`)
      - traefik.http.routers.grafana-secure.tls=true
      - traefik.http.routers.grafana-secure.tls.certresolver=letsencrypt

  influxdb:
    image: influxdb:latest
    container_name: influxdb
    restart: unless-stopped
    volumes:
      - influxdb_data:/var/lib/influxdb
    env_file:
      - tick.env
    labels:
      - org.label-schema.group=monitoring
      - traefik.enable=true
      - traefik.http.services.influxdb.loadbalancer.server.port=8086
      - traefik.http.routers.influxdb-secure.entrypoints=websecure
      - traefik.http.routers.influxdb-secure.rule=Host(`${INFLUXDB_FQDN}`)
      - traefik.http.routers.influxdb-secure.tls=true
      - traefik.http.routers.influxdb-secure.tls.certresolver=letsencrypt
    networks:
      - proxy
      - monitoring

  telegraf:
    image: telegraf:latest
    container_name: telegraf
    restart: unless-stopped
    volumes:
      - ./telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/host/sys:ro
      - /proc:/host/proc:ro
      - /etc:/host/etc:ro
    environment:
      - HOST_PROC=/host/proc
      - HOST_SYS=/host/sys
      - HOST_ETC=/host/etc
    env_file:
      - tick.env
    networks:
      - monitoring

volumes:
  grafana_data:
  influxdb_data:

networks:
  monitoring:
  proxy:
    external: true
